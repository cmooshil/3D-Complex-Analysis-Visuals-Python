#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug  5 21:28:54 2019

@author: christinamooshil
"""

from mpl_toolkits import mplot3d

import numpy as np
import matplotlib.pyplot as plt

#LOG FUNCTION
def reLog(N_max, xmin, xmax, ymin, ymax, nx, ny):
    x = np.linspace(xmin, xmax, nx)
    y = np.linspace(ymax, ymin, ny)
    z = np.zeros([nx, ny])
    for a in range(nx):
        for b in range(ny):
            z[a,b] = np.log10(complex(x[a], y[b])).real
    return z

def imLog(N_max, xmin, xmax, ymin, ymax, nx, ny):
    x = np.linspace(xmin, xmax, nx)
    y = np.linspace(ymax, ymin, ny)
    z = np.zeros([nx, ny])
    for a in range(nx):
        for b in range(ny):
            z[a,b] = np.log10(complex(x[a], y[b])).imag
    return z

def modLog(N_max, xmin, xmax, ymin, ymax, nx, ny):
    x = np.linspace(xmin, xmax, nx)
    y = np.linspace(ymax, ymin, ny)
    z = np.zeros([nx, ny])
    for a in range(nx):
        for b in range(ny):
            z[a, b]=abs(np.log10(complex(x[a], y[b])))
    return z


def main():
    print("Type r for real part of complex log, i for imaginary part, m for the modulus of the complex log fn: ")
    response = input()
    if response.lower() == 'r':
        #real
        xmin = -10
        xmax = 10
        ymin = -10
        ymax = 10
        maxNumSteps = 32
        pts = 200

        x = np.linspace(-6, 6, 200)
        y = np.linspace(-6, 6, 200)
        
        X, Y = np.meshgrid(x, y)
        
        logre = reLog(maxNumSteps, xmin, xmax, ymin, ymax, pts, pts)
        
        fig1 = plt.figure(1)
        ax = plt.axes(projection='3d')
        ax.contour3D(X, Y, logre, 50, cmap=plt.cm.rainbow)
        ax.set_xlabel('x')
        ax.set_ylabel('y')
        ax.set_zlabel('z')
        ax = plt.axes(projection='3d')
        ax.plot_surface(X,Y,logre, rstride=1, cstride=1,
                        cmap='plasma', edgecolor='none')
        ax.set_title('Real Log')
        #ax.view_init(60, 35)
        fig1
        print('Loading...')
        
    elif response.lower() == 'i':
        #imaginary
        xmin = -10
        xmax = 10
        ymin = -10
        ymax = 10
        maxNumSteps = 32
        pts = 200
        
        x = np.linspace(-6, 6, 200)
        y = np.linspace(-6, 6, 200)
        
        X, Y = np.meshgrid(x, y)
        
        logimag = imLog(maxNumSteps, xmin, xmax, ymin, ymax, pts, pts)
        
        fig2 = plt.figure(2)
        ax = plt.axes(projection='3d')
        ax.contour3D(X, Y, logimag, 50, cmap=plt.cm.rainbow)
        ax.set_xlabel('x')
        ax.set_ylabel('y')
        ax.set_zlabel('z')
        ax = plt.axes(projection='3d')
        ax.plot_surface(X,Y,logimag, rstride=1, cstride=1,
                        cmap='plasma', edgecolor='none')
        ax.set_title('Imaginary Log')
        ax.view_init(60, 35)
        fig2
        print('Loading...')
        
    elif response.lower() == 'm':
        #mod
        xmin = -10
        xmax = 10
        ymin = -10
        ymax = 10
        maxNumSteps = 32
        pts = 200
        
        x = np.linspace(-6, 6, 200)
        y = np.linspace(-6, 6, 200)
        
        X, Y = np.meshgrid(x, y)
        
        logmod = modLog(maxNumSteps, xmin, xmax, ymin, ymax, pts, pts)

        fig3 = plt.figure(3)
        ax = plt.axes(projection='3d')
        ax.contour3D(X, Y, logmod, 50, cmap=plt.cm.rainbow)
        ax.set_xlabel('x')
        ax.set_ylabel('y')
        ax.set_zlabel('z')
        ax = plt.axes(projection='3d')
        ax.plot_surface(X,Y,logmod, rstride=1, cstride=1,
                        cmap='plasma', edgecolor='none')
        ax.set_title('|log(x+iy)|')
        #ax.view_init(60, 35)
        fig3
        print('Loading...')
main()
