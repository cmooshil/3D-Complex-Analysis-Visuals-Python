#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug  6 12:19:49 2019

@author: christinamooshil
"""

from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt

#MODULUS
def reMod(N_max, xmin, xmax, ymin, ymax, nx, ny):
    x = np.linspace(xmin, xmax, nx)
    y = np.linspace(ymax, ymin, ny)
    z = np.zeros([nx, ny])
    for a in range(nx):
        for b in range(ny):
            # the function's value
            z[a,b] = np.abs(complex(x[a], y[b])).real
    return z

def imMod(N_max, xmin, xmax, ymin, ymax, nx, ny):
    x = np.linspace(xmin, xmax, nx)
    y = np.linspace(ymax, ymin, ny)
    z = np.zeros([nx, ny])
    for a in range(nx):
        for b in range(ny):
            z[a,b] = np.abs(complex(x[a], y[b])).imag
    return z

def modMod(N_max, xmin, xmax, ymin, ymax, nx, ny):
    x = np.linspace(xmin, xmax, nx)
    y = np.linspace(ymax, ymin, ny)
    z = np.zeros([nx, ny])
    for a in range(nx):
        for b in range(ny):
            z[a, b]=abs(abs(complex(x[a], y[b])))
    return z

def main():
    print("Type r for real part of complex modulus, i for imaginary part, m for the modulus of the complex modulus fn: ")
    response = input()
    if response.lower() == 'r':
        xmin = -10
        xmax = 10
        ymin = -10
        ymax = 10
        maxNumSteps = 32
        pts = 200
        
        x = np.linspace(-6, 6, 200)
        y = np.linspace(-6, 6, 200)
        
        X, Y = np.meshgrid(x, y)
        
        modre = reMod(maxNumSteps, xmin, xmax, ymin, ymax, pts, pts)
        
        fig1 = plt.figure(1)
        ax = plt.axes(projection='3d')
        ax.contour3D(X, Y, modre, 50, cmap=plt.cm.plasma)
        ax.set_xlabel('x')
        ax.set_ylabel('y')
        ax.set_zlabel('z')
        ax = plt.axes(projection='3d')
        ax.plot_surface(X,Y,modre, rstride=1, cstride=1,
                        cmap='plasma', edgecolor='none')
        ax.set_title('Re[|x+iy|]')
        #ax.view_init(60, 35)
        fig1
        print('Loading...')
    
    elif response.lower() == 'i':
        xmin = -10
        xmax = 10
        ymin = -10
        ymax = 10
        maxNumSteps = 32
        pts = 200
        
        x = np.linspace(-6, 6, 200)
        y = np.linspace(-6, 6, 200)
        
        X, Y = np.meshgrid(x, y)
    
        modim = imMod(maxNumSteps, xmin, xmax, ymin, ymax, pts, pts)
        
        fig2 = plt.figure(2)
        ax = plt.axes(projection='3d')
        ax.contour3D(X, Y, modim, 50, cmap=plt.cm.plasma)
        ax.set_xlabel('x')
        ax.set_ylabel('y')
        ax.set_zlabel('z')
        ax = plt.axes(projection='3d')
        ax.plot_surface(X,Y,modim, rstride=1, cstride=1,
                        cmap='plasma', edgecolor='none')
        ax.set_title('Im[|x+iy|]')
        ax.view_init(60, 35)
        fig2
        print('Loading...')
        print('The modulus of a complex number has no imaginary part.')
        
    elif response.lower() == 'm':
        xmin = -10
        xmax = 10
        ymin = -10
        ymax = 10
        maxNumSteps = 32
        pts = 200
        
        x = np.linspace(-6, 6, 200)
        y = np.linspace(-6, 6, 200)
        
        X, Y = np.meshgrid(x, y)
        
        modmod = modMod(maxNumSteps, xmin, xmax, ymin, ymax, pts, pts)
        
        fig3 = plt.figure(3)
        ax = plt.axes(projection='3d')
        ax.contour3D(X, Y, modmod, 50, cmap=plt.cm.plasma)
        ax.set_xlabel('x')
        ax.set_ylabel('y')
        ax.set_zlabel('z')
        ax = plt.axes(projection='3d')
        ax.plot_surface(X,Y,modmod, rstride=1, cstride=1,
                        cmap='plasma', edgecolor='none')
        ax.set_title('||x+iy||')
        #ax.view_init(60, 35)
        fig3
        print('Loading...')
    
main()